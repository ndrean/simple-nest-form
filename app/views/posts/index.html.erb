
<p id="notice"><%= notice %></p>
<div class="row">
  <h1>Index of Posts</h1>
</div>



<div class="row"> 
  <h5>1) Rendering with a table and iteration with <code>&lt% @posts.each do |post| %></code></h5>
  <br>

<button class="badge badge-info mybadge", id="index_posts">Show Post all</button>

  <table class="table table-dark">
    <thead>
      <tr>
        <th scope="col">Title</th>
        <th scope="col">Body</th>
        <th scope="col" colspan="3"></th>
      </tr>
    </thead>

    <tbody id='posts_list'>
     <%= render 'posts/posts', posts: @posts %>
    </tbody>
  </table>
</div>
<div class="row">
   <%= link_to 'New Post', new_post_path, class:"badge badge-info mybadge" %>
</div>
<div class="row">
 <p>We defined a button to display all the posts. On page load, the list is empty
We defined a JS <code>fetch() GET</code> function that triggers on this button click, 
and points to the URL  `/posts?f=""`. This URL is served by the method 'posts#index'.
We put a query string `f=""` such that we can differenciate the presence of params so
that the method `index` can react differently: an empty array `[]` on page load, and
`Post.all` when 'index' sees some params. Then we render a partial. Note that it is
important to use `locals: {posts: @posts}` for this to work (usually we don't need `locals`).
The JS `fetch()` asks for 'text/html' and parses the response from 'index' into 'text' with <code>response.text()</code>.
Then we just pass this content in the (unsual) form 'text/html' (parsed by Ruby, see in the console/network call) to render in
the view. Note: we need Turbolinks to be loaded to use the JS methods (see 'application.js')</p>

  <div class="col-md-6">
  <pre>
# post_controller.rb
def index
  if params[:f].present?
    @posts = Post.all
    render partial: 'posts/posts', locals: {posts: @posts}, layout: false
  else
  #   # on page load, show nothing
    @posts = []
  end
end
  </pre>
  
  </div>
  <div class="col-md-6">
 

  <pre>
#/packs/components/fetchPosts.js
const fetchPosts = (tag) => {
  document.querySelector(tag).addEventListener("click", (e) => {
    e.preventDefault();
    try {
      const query = await fetch('/posts?f=""', {
        method: "GET",
        headers: {
          "Content-Type": "text/html",
          Accept: "text/html",
        },
        credentials: "same-origin", // default value
      });
      if (query.ok) {
        const content = await query.text();
        return (document.querySelector("#posts_list").innerHTML = content);
      }
    } catch (error) {
      throw error;
    }
  });
};

export { fetchPosts };


  </pre>
  </div>
</div>



<br>


<div class="row">
  <h5>2) Other possibility: rendering with <code>&lt%= render @posts %></code> 
  with the partial <em>#views/posts/_post.html.erb</em>. We used <code>style='display:inline-block'</code> 
  to have a flex-like display.</h5>

</div>
<%= link_to 'Show All Articles', articles_path, remote: true, id:"article_btn", class:"badge badge-info mybadge" %>
<p>We have another Ajax method to render. The link <code>remote: true</code> above points to the `posts#display_articles` method where
we just defined the <code>respond_to</code> to <em>format.js</em>,  which renders the view '/posts/display_articles.js.erb'.
Note: we need <code>insertAdjacentHTML</code> and not just <em>innerHTML</em> for this to work.</p>
<pre>
document.querySelector("#articles_list").innerHTML = ""
document.querySelector("#articles_list").insertAdjacentHTML('afterbegin',
`<%= j render @posts %>`)
</pre>
<div id="articles_list">
  <%= render @posts %>
  <!--  above is shorthand for %= render partial 'psots/post', collection: @posts %-->
</div>
<div class="row">
<h5>3) Importing <em>.js</em> libraries into <em>.js.erb</em> files</h5>
<p>To add Erb support in your JS templates, run <code>bundle exec rails webpacker:install:erb</code> 
on a Rails app already setup with Webpacker. We then can create a <em>.js.erb</em> file in the
folder <em>/javascript/packs</em>. Then we can use <em>ERB</em> (Ruby parses it first) and
external libraries with <code>import { myFunction } from '../components/myJsFile.js</code>. 
</p>
<p> Note 1: A 'standard' view rendering file <em>.js.erb</em> located in the views does <strong>not</strong>
have access to <em>import</em>, only those located in the folder <em>/javascript/packs/</em> do
 (after running <em>webpacker:install:erb)</em></p>
<p>Note 2: To use a <em>JS</em> library inside a view <em>.html.erb</em>, we need to:</p>
<ul>
  <li>import the library in a <em>someFile.js.erb</em> file in <em>/javascript/packs</em></li>
  <li>import the <em>someFile.js.erb</em> file in the view with <code>&lt%= javascript_pack_tag 'someFile' %></code></li>
</ul>  

<p>Note 3: we need to have Turbolinks loaded to access to the DOM, so all the code in the 
<em>someFile.js.erb</em> file is a callback: <code>document.addEventListener("turbolinks:load", myFunction})</code> 
and declare <code>const myFunction = ()=> {[...]}</code> after.
</p>

<p>
Note 4: This can save on _data-attributes_ (the <code>`data-something="&lt%= Post.first.id%>"`</code> in the HTML file
 with it's searching <code>`document.querySelector('[data-something]')` </code>can be replaced simply by eg
  <code>`const id = &lt%= Post.first.id%> </code> in the _.js.erb_ file)
</p>
</div>
<div id="test" data-id="<%= Post.first.id %>">Appended by  <em>hello_erb.js.erb</em> using an external library:</div>
<%= javascript_pack_tag 'hello_erb' %>



